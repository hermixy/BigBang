#pragma once

#include <map>

#include "credit.idl"
#include "planet.hpp"

#include "graphlet/shapelet.hpp"

namespace WarGrey::SCADA {
	template<class T, typename E>
	private class Console abstract {
	typedef Credit<Labellet, E> CreditLabellet;

	public:
		Console(T* master, Platform::String^ l10n) : master(master), l10n_prefix(l10n) {}

	public:
		template<class G>
		void load_graphlets(std::map<E, G*>& gs, std::map<E, Credit<WarGrey::SCADA::Labellet, E>*>& ls
			, E id0, E idn, float radius, double degrees) {
		    for(E id = id0; id <= idn; id++) {
			    this->load_graphlet(gs, ls, id, radius, degrees);
		    }
	    }
	
	    template<class G>
		void load_graphlets(std::map<E, G*>& gs, std::map<E, Credit<WarGrey::SCADA::Labellet, E>*>& ls
			, E id0, E idn, float radius, double degrees, std::map<E, Credit<WarGrey::SCADA::Labellet, E>*>& cs) {
			this->load_graphlets(gs, ls, id0, idn, radius, degrees);

			for(E id = id0; id <= idn; id++) {
				cs[id] = this->make_label(id, Colours::Silver);
			}
		}

		template<class G>
		void load_graphlet(std::map<E, G*>& gs, std::map<E, Credit<WarGrey::SCADA::Labellet, E>*>& ls
			, E id, float radius, double degrees) {
			G* glet = new G(radius, degrees);
			glet->id = id;

			gs[id] = this->master->insert_one(glet);
			ls[id] = this->make_label(speak(id.ToString()), id, Colours::Silver);
		}

		void load_label(std::map<E, Credit<WarGrey::SCADA::Labellet, E>*>& ls, Platform::String^ caption, E id
			, Microsoft::Graphics::Canvas::Brushes::CanvasSolidColorBrush^ color
			, Microsoft::Graphics::Canvas::Text::CanvasTextFormat^ font = nullptr) {
			
			ls[id] = this->make_label(caption, id, color, font);
		}

		void load_label(std::map<E, Credit<WarGrey::SCADA::Labellet, E>*>& ls, E id
			, Microsoft::Graphics::Canvas::Brushes::CanvasSolidColorBrush^ color
			, Microsoft::Graphics::Canvas::Text::CanvasTextFormat^ font = nullptr) {
			
			ls[id] = this->make_label(id, color, font);
		}

		Credit<WarGrey::SCADA::Labellet, E>* make_label(Platform::String^ caption, E id
			, Microsoft::Graphics::Canvas::Brushes::CanvasSolidColorBrush^ color
			, Microsoft::Graphics::Canvas::Text::CanvasTextFormat^ font = nullptr) {
			Credit<Labellet, E>* label = new Credit<Labellet, E>(caption);

			label->id = id;
			label->set_color(color);

			if (font != nullptr) {
				label->set_font(font);
			}

			return this->master->insert_one(label);
		}

		Credit<WarGrey::SCADA::Labellet, E>* make_label(E id
			, Microsoft::Graphics::Canvas::Brushes::CanvasSolidColorBrush^ color
			, Microsoft::Graphics::Canvas::Text::CanvasTextFormat^ font = nullptr) {
			Platform::String^ idstr = id.ToString();
			Platform::String^ caption = (this->l10n_prefix == nullptr ? idstr : this->l10n_prefix + "_" + idstr);

			return this->make_label(speak(caption), id, color, font);
		}

		Credit<WarGrey::SCADA::Booleanlet, E>* make_indicator(Platform::String^ caption, Microsoft::Graphics::Canvas::Brushes::CanvasSolidColorBrush^ color) {
			Credit<WarGrey::SCADA::Booleanlet, E>* indicator = new Credit<WarGrey::SCADA::Booleanlet, E>(speak(caption));

			indicator->set_indicator_color(color);

			return master->insert_one(indicator);
		}

	protected:
		T* master;

	protected:
		Platform::String^ l10n_prefix;
	};
}
